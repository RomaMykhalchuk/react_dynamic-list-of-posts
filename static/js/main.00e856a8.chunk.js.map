{"version":3,"sources":["Components/User.tsx","Components/Comment.tsx","Components/CommentsList.tsx","Components/Post.tsx","Components/PostsList.tsx","helpers/api.ts","App.tsx","index.tsx"],"names":["User","user","className","name","href","email","address","street","suite","city","Comment","comment","body","CommentsList","comments","map","key","id","Post","post","title","PostsList","posts","URL","App","useState","setPosts","isLoading","setIsLoading","searchQuery","setSearchQuery","loadData","a","fetch","then","response","json","postsFromServer","commentsFromServer","usersFromServer","preparedPosts","find","userId","filter","postId","length","type","onClick","disabled","onChange","event","target","value","placeholder","searchingQuery","postsList","normalizedQuery","toLowerCase","includes","visiblePosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.00e856a8.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  user: User;\n};\n\nconst User: React.FunctionComponent<Props> = ({ user }) => {\n  return (\n    <div className=\"post__author\">\n      <span className=\"post__author-name\">{user.name}</span>\n      <a href=\"link\" className=\"post__author-email\">{user.email}</a>\n      <span className=\"post__author-address\">\n        {`${user.address.street} ${user.address.suite} ${user.address.city}`}\n      </span>\n    </div>\n  );\n};\n\nexport default User;\n","import React from 'react';\n\ntype Props = {\n  comment: Comment;\n};\n\nconst Comment: React.FunctionComponent<Props> = ({ comment }) => {\n  return (\n    <section className=\"post__comment\">\n      <p className=\"post__comment-body\">{comment.body}</p>\n      <div className=\"post__comment-author\">\n        <a href=\"/\" className=\"post__comment-author-email\">\n          {comment.email}\n        </a>\n        <span className=\"post__comment-author-name\">{comment.name}</span>\n      </div>\n    </section>\n  );\n};\n\nexport default Comment;\n","import React from 'react';\nimport Comment from './Comment';\n\ntype Props = {\n  comments: Comment[];\n};\n\nconst CommentsList: React.FunctionComponent<Props> = ({ comments }) => {\n  return (\n    <section className=\"post__comments-section\">\n      <h3 className=\"post__comments-title\">Comments:</h3>\n      {comments.map(comment => <Comment comment={comment} key={comment.id} />)}\n    </section>\n  );\n};\n\nexport default CommentsList;\n","import React from 'react';\nimport User from './User';\nimport './Post.scss';\nimport CommentsList from './CommentsList';\n\ntype Props = {\n  post: Post;\n};\n\nconst Post: React.FunctionComponent<Props> = ({ post }) => {\n  return (\n    <article className=\"post\">\n      <h2 className=\"post__title\">{post.title}</h2>\n      <p className=\"post__text\">{post.body}</p>\n      <User user={post.user} />\n      <CommentsList comments={post.comments} />\n    </article>\n  );\n};\n\n\nexport default Post;\n","import React from 'react';\nimport Post from './Post';\n\ntype Props = {\n  posts: Post[];\n};\n\nconst PostsList: React.FunctionComponent<Props> = ({ posts }) => {\n  return (\n    <div className=\"container\">\n      {posts.map(post => <Post post={post} key={post.id} />)}\n    </div>\n  );\n};\n\nexport default PostsList;\n","const URL = 'https://jsonplaceholder.typicode.com';\n\nexport const getPostsFromServer = () => {\n  return fetch(`${URL}/posts`)\n    .then(response => response.json());\n};\n\nexport const getCommentsFromServer = () => {\n  return fetch(`${URL}/comments`)\n    .then(response => response.json());\n};\n\nexport const getUsersFromServer = () => {\n  return fetch(`${URL}/users`)\n    .then(response => response.json());\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport PostsList from './Components/PostsList';\n\nimport {\n  getPostsFromServer,\n  getCommentsFromServer,\n  getUsersFromServer,\n} from './helpers/api';\n\nconst App: React.FunctionComponent = () => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const loadData = async () => {\n    setIsLoading(true);\n    const postsFromServer = await getPostsFromServer();\n    const commentsFromServer = await getCommentsFromServer();\n    const usersFromServer = await getUsersFromServer();\n\n    const preparedPosts = postsFromServer.map((post: Post) => ({\n      ...post,\n      user: usersFromServer.find((user: User) => user.id === post.userId),\n      comments: commentsFromServer.filter(\n        (comment: Comment) => comment.postId === post.id,\n      ),\n    }));\n\n    setPosts(preparedPosts);\n  };\n\n  const filterPosts = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value);\n  };\n\n  const visiblePosts = (searchingQuery: string, postsList: Post[]) => {\n    const normalizedQuery = searchingQuery.toLowerCase();\n\n    return postsList.filter(\n      (post: Post) => post.title.toLowerCase().includes(normalizedQuery)\n        || post.body.toLowerCase().includes(normalizedQuery),\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of posts</h1>\n      {posts.length === 0 ? (\n        <button\n          type=\"button\"\n          onClick={loadData}\n          disabled={isLoading}\n          className=\"button\"\n        >\n          {isLoading ? 'Loading...' : 'Load'}\n        </button>\n      ) : (\n        <>\n          <input\n            type=\"text\"\n            onChange={filterPosts}\n            placeholder=\"search the post\"\n          />\n          <PostsList posts={visiblePosts(searchQuery, posts)} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}